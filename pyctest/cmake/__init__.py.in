#!@PYTHON_EXECUTABLE@
# MIT License
#
# Copyright (c) 2018, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

"""
Direct interface to CMake executable:

.. highlight:: bash
.. code-block:: bash

    python -m pyctest.cmake [ARG [ARG]]
"""

from __future__ import absolute_import
import os, sys, imp, ctypes, platform, warnings

__author__ = "Jonathan Madsen"
__copyright__ = "Copyright 2018, The Regents of the University of California"
__credits__ = ["Jonathan Madsen"]
__license__ = "MIT"
__version__ = "@PROJECT_VERSION@"
__maintainer__ = "Jonathan Madsen"
__email__ = "jonrobm.programming@gmail.com"
__status__ = "Development"
__all__ = ["CMake"]


# -------------------------------------------------------------------------------------- #
# versioning
#
sys.modules[__name__].__setattr__(
    "version_info",
    (
        int("@PYCTEST_VERSION_MAJOR@"),
        int("@PYCTEST_VERSION_MINOR@"),
        int("@PYCTEST_VERSION_PATCH@"),
    ),
)
sys.modules[__name__].__setattr__("version", "@PYCTEST_VERSION@")
sys.modules[__name__].__setattr__(
    "build_info",
    {
        "date": "@PYCTEST_INSTALL_DATE@",
        "library_architecture": "@CMAKE_SYSTEM_PROCESSOR@",
        "system_name": "@CMAKE_SYSTEM_NAME@",
        "system_version": "@CMAKE_SYSTEM_VERSION@",
        "build_type": "@CMAKE_BUILD_TYPE@",
        "compiler": "@CMAKE_CXX_COMPILER@",
        "compiler_id": "@CMAKE_CXX_COMPILER_ID@",
        "compiler_version": "@CMAKE_CXX_COMPILER_VERSION@",
    },
)
version_info = sys.modules[__name__].__getattribute__("version_info")
build_info = sys.modules[__name__].__getattribute__("build_info")
version = sys.modules[__name__].__getattribute__("version")
__all__ += ["version_info", "version", "build_info"]


# -------------------------------------------------------------------------------------- #
# provide a function to run CMake
#
def CMake(*args, **kwargs):
    """Function for direct access to CMake

    Parameters
    ----------
    args: list
        List of CMake arguments (added to cmd-line in order after `kwargs`)
    kwargs: dict
        List of CMake variable definitions (added before `args`)

    Example
    -------
    .. highlight:: python
    .. code-block:: python

        pyctest.cmake.CMake("--build", os.getcwd(), "--target", "all")

    .. highlight:: python
    .. code-block:: python

        _kwargs['CMAKE_BUILD_TYPE'] = 'Debug'
        _kwargs['CMAKE_INSTALL_PREFIX'] = '/usr/local'
        _kwargs['BUILD_SHARED_LIBS'] = 'ON'
        _args = [ os.path.dirname(os.getcwd()), '-G', 'Ninja' ]
        pyctest.cmake.CMake(_args, _kwargs)
    """

    import pyctest as _pyctest
    import subprocess as sp

    exe_args = []

    # process dictionary (assumes defining for cache)
    for key, val in kwargs.items():
        exe_args.append("-D{}={}".format(key, val))

    # process list of arguments (assumes proper ordering)
    for entry in args:
        exe_args.append("{}".format(entry))  # convert to string

    try:
        sp.check_call([_pyctest.cmake_executable] + exe_args)
    except Exception as e:
        print("Exception occurred: {}".format(e))
