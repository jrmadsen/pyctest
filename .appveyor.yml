version: 1.0.{build}

image:
  - Visual Studio 2017

test: off

build:
  parallel: true

platform:
  - x64

environment:
  global:
    PYTHON: "C:\\conda"
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci-helpers\\appveyor\\windows_sdk.cmd"

  matrix:
    - PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
    - PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"
    - PYTHON_VERSION: "3.8"
      PYTHON_ARCH: "64"

install:
  - ps: |
      # CMake generator
      if ($env:APPVEYOR_JOB_NAME -like "*Visual Studio 2017*") {
        $env:CMAKE_GENERATOR = "Visual Studio 15 2017"
      } else {
        $env:CMAKE_GENERATOR = "Visual Studio 16 2019"
      }

      # Python environment
      if ($env:PLATFORM -eq "x64") {
        $env:PATH = "C:\Miniconda$env:CONDA-x64;C:\Miniconda$env:CONDA-x64\Scripts;$env:PATH"
        $env:CMAKE_PREFIX_PATH = "C:\Miniconda$env:CONDA-x64;C:\Miniconda$env:CONDA-x64\Scripts"
        $env:PYTHONHOME = "C:\Miniconda$env:CONDA-x64"
        $env:PYTHON_EXE = "C:\Miniconda$env:CONDA-x64\python.exe"
      } else {
        $env:PATH = "C:\Miniconda$env:CONDA;C:\Miniconda$env:CONDA\Scripts;$env:PATH"
        $env:CMAKE_PREFIX_PATH = "C:\Miniconda$env:CONDA;C:\Miniconda$env:CONDA\Scripts"
        $env:PYTHONHOME = "C:\Miniconda$env:CONDA"
        $env:PYTHON_EXE = "C:\Miniconda$env:CONDA\python.exe"
      }
  - if "%PYTHON_ARCH%" == "64" set "ARCH_LABEL=-x64"
  - if "%PYTHON_ARCH%" == "64" set "CMAKE_ARCH=x%PYTHON_ARCH%"
  - echo PATH %PATH%
  - conda config --set always_yes yes
  - conda config --set anaconda_upload no
  - conda install -n root conda-build anaconda-client --no-pin
  - "%CONDA_ROOT%\\Scripts\\activate root"

build_script:
  - echo CONDA_ROOT %CONDA_ROOT%
  - echo CONDA_PREFIX %CONDA_PREFIX%
  - echo PATH %PATH%
  - conda info -a
  - python update-conda-yaml.py
  - cp recipe/meta.yaml ./
  - conda-build --python="%PYTHON_VERSION%" .
