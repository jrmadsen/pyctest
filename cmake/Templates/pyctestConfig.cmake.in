
include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@ConfigVersion.cmake)

@PACKAGE_INIT@

# -------------------------------------------------------------------------------------- #
#   Settings
# -------------------------------------------------------------------------------------- #
set(@PROJECT_NAME@_C_FLAGS "@CMAKE_C_FLAGS@")
set(@PROJECT_NAME@_CXX_FLAGS "@CMAKE_CXX_FLAGS@ -std=c++${CMAKE_CXX_STANDARD}")
set(PYCTEST_USE_MPI @MPI_FOUND@)
set(PYCTEST_EXCEPTIONS @PYCTEST_EXCEPTIONS@)
set(PYCTEST_PYTHON_BINDINGS @PYCTEST_USE_PYTHON_BINDING@)
set(PYCTEST_DYNAMIC_LINK @BUILD_SHARED_LIBS@)

# -------------------------------------------------------------------------------------- #
#   Determine install tree or build tree
# -------------------------------------------------------------------------------------- #
if("${CMAKE_SOURCE_DIR}" STREQUAL "@CMAKE_SOURCE_DIR@")
    # in the build tree
    set(_PYCTEST_BUILD_TREE ON)
else("${CMAKE_SOURCE_DIR}" STREQUAL "@CMAKE_SOURCE_DIR@")
    # in the install tree
    set(_PYCTEST_INSTALL_TREE ON)
endif("${CMAKE_SOURCE_DIR}" STREQUAL "@CMAKE_SOURCE_DIR@")

if(_PYCTEST_INSTALL_TREE)

    set_and_check(@PROJECT_NAME@_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
    set_and_check(@PROJECT_NAME@_LIB_DIR "@PACKAGE_LIB_INSTALL_DIR@")
    if(PYCTEST_PYTHON_BINDINGS)
        set_and_check(@PROJECT_NAME@_PYTHON_DIR "@PACKAGE_PYTHON_INSTALL_DIR@")
    endif(PYCTEST_PYTHON_BINDINGS)

    foreach(_TYPE LIB INCLUDE PYTHON)
        set(@PROJECT_NAME@_${_TYPE}_DIRS ${@PROJECT_NAME@_${_TYPE}_DIR})
    endforeach(_TYPE LIB INCLUDE PYTHON)

    include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@LibraryDepends.cmake)
    check_required_components(@PROJECT_NAME@)

    #--------------------------------------------------------------------------#
    #   try to get imported location
    #--------------------------------------------------------------------------#

    string(TOUPPER "${CMAKE_BUILD_TYPE}" _BUILD_TYPE)
    if("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")
        set(IMPORTED_LOCATION_BUILD IMPORTED_LOCATION_${_BUILD_TYPE})
    else("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")
        set(IMPORTED_LOCATION_BUILD )
    endif("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")

    foreach(_LANG C CXX)
        string(TOLOWER "${_LANG}" _LANG_LOWER)

        foreach(_LOC
            IMPORTED_LOCATION
            ${IMPORTED_LOCATION_BUILD}
            IMPORTED_LOCATION_RELEASE
            IMPORTED_LOCATION_RELWITHDEBINFO
            IMPORTED_LOCATION_DEBUG
            IMPORTED_LOCATION_MINSIZEREL)
            if(NOT _${_LANG}_LOCATION)
                get_target_property(_${_LANG}_LOCATION @LIBNAME@-${_LANG_LOWER}-library ${_LOC})
            endif(NOT _${_LANG}_LOCATION)
        endforeach(_LOC
            IMPORTED_LOCATION
            ${IMPORTED_LOCATION_BUILD}
            IMPORTED_LOCATION_RELEASE
            IMPORTED_LOCATION_RELWITHDEBINFO
            IMPORTED_LOCATION_DEBUG
            IMPORTED_LOCATION_MINSIZEREL)

        if(_${_LANG}_LOCATION)
            set(@PROJECT_NAME@_${_LANG}_LIBRARY ${_${_LANG}_LOCATION}
                CACHE INTERNAL "@PROJECT_NAME@ ${_LANG} library")
        endif(_${_LANG}_LOCATION)

        unset(_${_LANG}_LOCATION)
    endforeach(_LANG C CXX)

else(_PYCTEST_INSTALL_TREE)

    set(@PROJECT_NAME@_INCLUDE_DIR "@PROJECT_SOURCE_DIR@/source"
        "@PROJECT_SOURCE_DIR@/source/cereal/include")

    if(PYCTEST_PYTHON_BINDINGS)
        list(APPEND @PROJECT_NAME@_INCLUDE_DIR "@PROJECT_SOURCE_DIR@/source/python/pybind11")
    endif(PYCTEST_PYTHON_BINDINGS)

    set(@PROJECT_NAME@_LIB_DIR "@PROJECT_BINARY_DIR@")

    if(PYCTEST_PYTHON_BINDINGS)
        set(@PROJECT_NAME@_PYTHON_DIR "@PROJECT_BINARY_DIR@")
    endif(PYCTEST_PYTHON_BINDINGS)

    set_property(TARGET @LIBNAME@-c-library
        PROPERTY IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/pyctestBuild.cmake")

    set_property(TARGET @LIBNAME@-cxx-library
        PROPERTY IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/pyctestBuild.cmake")

    set(PROJECT_DEPENDS @LIBNAME@-c-library @LIBNAME@-cxx-library)

endif(_PYCTEST_INSTALL_TREE)

set(@PROJECT_NAME@_INCLUDE_DIRS ${@PROJECT_NAME@_INCLUDE_DIR})
set(@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS "@EXTERNAL_INCLUDE_DIRS@")
foreach(_DIR ${@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS})
    list(APPEND @PROJECT_NAME@_INCLUDE_DIRS SYSTEM ${_DIR})
endforeach(_DIR ${@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS})

# -------------------------------------------------------------------------------------- #
#   CXX standard
# -------------------------------------------------------------------------------------- #
if(DEFINED CMAKE_CXX_STANDARD)
    if("${CMAKE_CXX_STANDARD}" VERSION_LESS 11 OR
        "${CMAKE_CXX_STANDARD}" VERSION_GREATER 17)
        set(CMAKE_CXX_STANDARD 11)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
    endif("${CMAKE_CXX_STANDARD}" VERSION_LESS 11 OR
        "${CMAKE_CXX_STANDARD}" VERSION_GREATER 17)
else(DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif(DEFINED CMAKE_CXX_STANDARD)

# -------------------------------------------------------------------------------------- #
#   Linking type
# -------------------------------------------------------------------------------------- #
if(NOT PYCTEST_DYNAMIC_LINK AND WIN32)
    add_definitions(-D_PYCTEST_ARCHIVE)
endif(NOT PYCTEST_DYNAMIC_LINK AND WIN32)

# -------------------------------------------------------------------------------------- #
#   pyctest link target
# -------------------------------------------------------------------------------------- #
set(@PROJECT_NAME@_C_LIBRARIES @LIBNAME@-c-library)
set(@PROJECT_NAME@_CXX_LIBRARIES @LIBNAME@-cxx-library)
set(@PROJECT_NAME@_LIBRARIES @LIBNAME@-cxx-library)

# -------------------------------------------------------------------------------------- #
#   Definitions
# -------------------------------------------------------------------------------------- #
if(PYCTEST_EXCEPTIONS)
    add_definitions(-DPYCTEST_EXCEPTIONS)
endif(PYCTEST_EXCEPTIONS)

if(PYCTEST_USE_MPI)
    add_definitions(-DPYCTEST_USE_MPI)
endif(PYCTEST_USE_MPI)

# -------------------------------------------------------------------------------------- #
#   find_package variables
# -------------------------------------------------------------------------------------- #
include(FindPackageHandleStandardArgs)
# handle the QUIETLY and REQUIRED arguments and set UnitTest++_FOUND to TRUE
# if all listed variables are TRUE
if(PYCTEST_PYTHON_BINDINGS)
    find_package_handle_standard_args(@PROJECT_NAME@ DEFAULT_MSG
        @PROJECT_NAME@_LIBRARIES
        @PROJECT_NAME@_C_LIBRARIES
        @PROJECT_NAME@_CXX_LIBRARIES
        @PROJECT_NAME@_INCLUDE_DIR
        @PROJECT_NAME@_PYTHON_DIR)
else(PYCTEST_PYTHON_BINDINGS)
    find_package_handle_standard_args(@PROJECT_NAME@ DEFAULT_MSG
        @PROJECT_NAME@_LIBRARIES
        @PROJECT_NAME@_C_LIBRARIES
        @PROJECT_NAME@_CXX_LIBRARIES
        @PROJECT_NAME@_INCLUDE_DIR)
endif(PYCTEST_PYTHON_BINDINGS)
